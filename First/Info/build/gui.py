
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import random
import cv2
from PIL import Image, ImageTk
import time
import json


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def make_window_transparent(window):
    window.wm_attributes('-transparentcolor', "#0C679B")

def center_window(root, width, height):
    # Get screen width and height
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    
    # Calculate position x, y to center the window
    x = (screen_width - width) // 2
    y = (screen_height - height) // 2
    
    # Set the dimensions of the window and the position
    root.geometry(f'{width}x{height}+{x}+{y}')

def animate_window_open(window, target_height, width, step=2, delay=5):
    current_height = window.winfo_height()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    window.geometry(f"{width}x{current_height}+{screen_width//2 - width//2}+{screen_height//2 - current_height//2}")

    if current_height < target_height:
        new_height = min(current_height + step, target_height)
    else:
        new_height = current_height
    
    new_y = screen_height // 2 - new_height // 2
    window.geometry(f"{width}x{new_height}+{screen_width//2 - width//2}+{new_y}")

    if new_height < target_height:
        window.after(delay, animate_window_open, window, target_height, width, step, delay)

def animate_window_close(window, target_height, width, step=2, delay=5):
    current_height = window.winfo_height()
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    window.geometry(f"{width}x{current_height}+{screen_width//2 - width//2}+{screen_height//2 - current_height//2}")

    if current_height > target_height:
        new_height = max(current_height - step, target_height)
    else:
        new_height = current_height
    
    new_y = screen_height // 2 - new_height // 2
    window.geometry(f"{width}x{new_height}+{screen_width//2 - width//2}+{new_y}")

    if new_height > target_height:
        window.after(delay, animate_window_close, window, target_height, width, step, delay)
    else:
        window.quit()

class VideoPlayer:
    def __init__(self, canvas, video_path, x, y, frame_skip=2, resize_factor=0.8):
        self.canvas = canvas
        self.video_path = video_path
        self.cap = cv2.VideoCapture(video_path)
        self.x = x
        self.y = y
        self.frame_skip = frame_skip  # Number of frames to skip
        self.resize_factor = resize_factor  # Factor to resize frames
        self.image_id = self.canvas.create_image(self.x, self.y)
        self.frame_count = 0
        self.update_frame()

    def update_frame(self):
        ret, frame = self.cap.read()
        
        if not ret:
            # If the video has ended, reset the capture object
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            ret, frame = self.cap.read()

        if ret:
            self.frame_count += 1
            if self.frame_count % self.frame_skip == 0:  # Skip frames for performance
                frame = cv2.resize(frame, (0, 0), fx=self.resize_factor, fy=self.resize_factor)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame)
                imgtk = ImageTk.PhotoImage(image=img)
                self.canvas.itemconfig(self.image_id, image=imgtk)
                self.canvas.imgtk = imgtk

        self.canvas.after(10, self.update_frame)

    def __del__(self):
        self.cap.release()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(eve):
    subprocess.Popen(['python', 'sfx_close.py'])
    animate_window_close(window, initial_height, window_width, step=30, delay=1)

def get():
    name=entry_1.get()
    age=entry_2.get()
    height=entry_3.get()
    weight=entry_4.get()
    wrk_rate=entry_5.get()
    result=entry_6.get()

    with open("Files/status.json", 'r') as first_fson:
        data=json.load(first_fson)
        data["status"][0]['name']=name
    
    with open("Files/status.json", 'w') as fson:
        json.dump(data, fson, indent=4)

    subprocess.Popen(['python', 'First/Theme Check/build/gui.py'])
    window.quit()

window = Tk()

initial_height = 0
target_height = 549
window_width = 867

window.geometry(f"{window_width}x{initial_height}")
animate_window_open(window, target_height, window_width, step=30, delay=1)
subprocess.Popen(['python', 'sfx.py'])

window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
make_window_transparent(window)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 549,
    width = 867,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    665.0,
    922.0,
    image=image_image_1
)

video_path = "Files/0001-0200.mp4"
player = VideoPlayer(canvas, video_path, 430.0, 263.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    450.0,
    286.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    188.0,
    101.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    188.0,
    310.99999999999994,
    image=image_image_4
)

canvas.create_text(
    321.0,
    137.0,
    anchor="nw",
    text="Name:",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    486.5,
    170.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=321.0,
    y=159.0,
    width=331.0,
    height=21.0
)

canvas.create_text(
    321.0,
    186.0,
    anchor="nw",
    text="Age (in Years):",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    381.5,
    219.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=321.0,
    y=208.0,
    width=121.0,
    height=21.0
)

canvas.create_text(
    321.0,
    239.0,
    anchor="nw",
    text="Height (in cm):",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    381.5,
    272.5,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=321.0,
    y=261.0,
    width=121.0,
    height=21.0
)

canvas.create_text(
    456.0,
    239.0,
    anchor="nw",
    text="Weight (in kg):",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    516.5,
    272.5,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=456.0,
    y=261.0,
    width=121.0,
    height=21.0
)

canvas.create_text(
    321.0,
    295.0,
    anchor="nw",
    text="Your Physical Workout rate per week ",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

canvas.create_text(
    321.0,
    313.0,
    anchor="nw",
    text="(Moderate, Extreme, Impossible):",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)
entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    459.0,
    349.5,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=321.0,
    y=338.0,
    width=276.0,
    height=21.0
)

canvas.create_text(
    321.0,
    369.0,
    anchor="nw",
    text="Desired Result (Mild Weight gain, Mild Weight Loss):",
    fill="#FFFFFF",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    418.5,
    402.5,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=321.0,
    y=391.0,
    width=195.0,
    height=21.0
)


canvas.create_rectangle(
    0.0,
    0.0,
    237.0,
    44.0,
    fill="#0C679B",
    outline="")

canvas.create_rectangle(
    0.0,
    512.0,
    867.0,
    554.0,
    fill="#0C679B",
    outline="")

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    36.0,
    278.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    831.0,
    288.0,
    image=image_image_6
)

canvas.create_rectangle(
    222.0,
    0.0,
    867.0,
    56.0,
    fill="#0C679B",
    outline="")

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    429.0,
    42.0,
    image=image_image_7
)

canvas.tag_bind(image_7, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_7, "<B1-Motion>", move_window)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    433.0,
    523.0,
    image=image_image_8
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_1.place(
    x=752.9273681640625,
    y=79.543701171875,
    width=26.41452407836914,
    height=29.49186897277832
)

button_1.place(
    x=752.9273681640625,
    y=79.543701171875,
    width=26.41452407836914,
    height=29.49186897277832
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=624.0,
    y=457.0,
    width=151.41452026367188,
    height=29.49186897277832
)

window.resizable(False, False)
window.mainloop()
