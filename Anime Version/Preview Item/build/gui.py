
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import subprocess
import csv
import json
import cv2
from PIL import Image, ImageTk
import os

subprocess.Popen(['python', 'sfx.py'])
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def make_window_transparent(window):
    # This function makes the window background transparent
    window.wm_attributes('-transparentcolor', "#0c679b")

window = Tk()

window.geometry("957x555")
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)
make_window_transparent(window)

debuff_1_name=''
debuff_2_name=''
debuff_1='-'
debuff_2='-'

buff_1_name=''
buff_2_name=''
buff_1='-'
buff_2='-'

desc1=desc2=''
segments = []
segment_length = 77

class VideoPlayer:
    def __init__(self, canvas, video_path, x, y):
        self.canvas = canvas
        self.video_path = video_path
        self.cap = cv2.VideoCapture(video_path)
        self.x = x
        self.y = y
        self.image_id = self.canvas.create_image(self.x, self.y)
        self.update_frame()

    def update_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            # If the video has ended, reset the capture object
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            ret, frame = self.cap.read()

        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)
            self.canvas.itemconfig(self.image_id, image=imgtk)
            self.canvas.imgtk = imgtk

        self.canvas.after(10, self.update_frame)

    def __del__(self):
        self.cap.release()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    win.quit()

with open('Files/Temp Files/Preview Item Temp.csv', 'r') as fout:
    fr=csv.reader(fout)
    for k in fr:
        name=k[0]
        qty=k[1]

with open("Files\Data\Inventory_List.json", 'r') as fson:
    data=json.load(fson)
    dat_keys=list(data.keys())

item_full_data={}

rank=data[name][0]["rank"]
cat=data[name][0]["cat"]
n_cat=cat
if cat.upper()=="FIRST GAUNTLET" or cat.upper()=="SECOND GAUNTLET":
    n_cat="GAUNTLET"
desc_full=data[name][0]["desc"]

for i in range(0, len(desc_full), segment_length):
    segments.append(desc_full[i:i+segment_length])

if len(segments) >= 1:
    desc1 = segments[0]
if len(segments) >= 2:
    desc2 = segments[1]
val=data[name][0]['Value']

item_full_data[name]=data[name]

def selling():
    with open("Files/status.json", 'r') as read_status_file:
        read_status_file_data=json.load(read_status_file)

    with open("Files/Inventory.json", 'r') as fin_inv_fson:
        fin_inv_data=json.load(fin_inv_fson)

        fin_qt=fin_inv_data[name][0]["qty"]
        fin_inv_data[name][0]["qty"]=fin_qt-1
        closing=False
        if fin_inv_data[name][0]["qty"]==0:
            del fin_inv_data[name]
            closing=True

    with open("Files/Inventory.json", 'w') as finaladdon_inv:
        json.dump(fin_inv_data, finaladdon_inv, indent=6)

    with open("Files/status.json", 'w') as write_status_file:
        read_status_file_data["status"][0]['coins']+=int(val)
        json.dump(read_status_file_data, write_status_file, indent=4)

    if closing==True:
        subprocess.Popen(['python', 'Anime Version/Inventory/build/gui.py'])

        window.quit()

    else:
        subprocess.Popen(['python', 'Anime Version/Item Data/build/gui.py'])

        window.quit()

def equip():
    if cat in ["HELM", "CHESTPLATE", "FIRST GAUNTLET", "SECOND GAUNTLET", "BOOTS", "COLLAR", "RING"]:
        with open('Files/Equipment.json', 'r') as finale_equip:
            finale_equip_data=json.load(finale_equip)
            finale_equip_data[cat]=item_full_data

        with open('Files/Equipment.json', 'w') as inject:
            json.dump(finale_equip_data, inject, indent=6)

        subprocess.Popen(['python', 'Anime Version/Equipment/build/gui.py'])

if type(data[name][0]["buff"]) is dict:
    try:
        buff_main=data[name][0]["buff"]
        rol=list(buff_main.keys())

        if rol[0]=="AGIbuff":
            buff_1_name="AGI"
        elif rol[0]=="STRbuff":
            buff_1_name="STR"
        elif rol[0]=="VITbuff":
            buff_1_name="VIT"
        elif rol[0]=="INTbuff":
            buff_1_name="INT"
        elif rol[0]=="PERbuff":
            buff_1_name="PER"
        elif rol[0]=="MANbuff":
            buff_1_name="MAN"

        buff_1="+"+str(data[name][0]["buff"][rol[0]])

        if rol[1]=="AGIbuff":
            buff_2_name="AGI"
        elif rol[1]=="STRbuff":
            buff_2_name="STR"
        elif rol[1]=="VITbuff":
            buff_2_name="VIT"
        elif rol[1]=="INTbuff":
            buff_2_name="INT"
        elif rol[1]=="PERbuff":
            buff_2_name="PER"
        elif rol[1]=="MANbuff":
            buff_2_name="MAN"

        buff_2="+"+str(data[name][0]["buff"][rol[1]])
    except:
        buff_2_name=''
        buff_2='-'
else:
    buff_1_name=''
    buff_2_name=''
    buff_1='-'
    buff_2='-'

if type(data[name][0]["debuff"]) is dict:
    try:
        debuff_main=data[name][0]["debuff"]
        rol_2=list(debuff_main.keys())

        if rol_2[0]=="AGIdebuff":
            debuff_1_name="AGI"
        elif rol_2[0]=="STRdebuff":
            debuff_1_name="STR"
        elif rol_2[0]=="VITdebuff":
            debuff_1_name="VIT"
        elif rol_2[0]=="INTdebuff":
            debuff_1_name="INT"
        elif rol_2[0]=="PERdebuff":
            debuff_1_name="PER"
        elif rol_2[0]=="MANdebuff":
            debuff_1_name="MAN"

        debuff_1="+"+str(data[name][0]["debuff"][rol_2[0]])

        if rol_2[1]=="AGIdebuff":
            debuff_2_name="AGI"
        elif rol_2[1]=="STRdebuff":
            debuff_2_name="STR"
        elif rol_2[1]=="VITdebuff":
            debuff_2_name="VIT"
        elif rol_2[1]=="INTdebuff":
            debuff_2_name="INT"
        elif rol_2[1]=="PERdebuff":
            debuff_2_name="PER"
        elif rol_2[1]=="MANdebuff":
            debuff_2_name="MAN"

        debuff_2="+"+str(data[name][0]["debuff"][rol_2[1]])
    except:
        debuff_2_name=''
        debuff_2='-'
else:
    debuff_1_name=''
    debuff_2_name=''
    debuff_1='-'
    debuff_2='-'

def return_inv():
    subprocess.Popen(['python', 'Anime Version/Inventory/build/gui.py'])
    window.quit()


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 555,
    width = 957,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    478.0,
    277.0,
    image=image_image_1
)

video_path = "Files/0001-0200.mp4"
player = VideoPlayer(canvas, video_path, 478.0, 277.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    482.976318359375,
    283.0,
    image=image_image_2
)

canvas.create_rectangle(
    346.0,
    111.0,
    758.0,
    147.0,
    fill="#303030",
    outline="")

canvas.create_text(
    347.0,
    112.0,
    anchor="nw",
    text="Item:",
    fill="#FFFFFF",
    font=("Montserrat Regular", 24 * -1)
)

canvas.create_text(
    407.0,
    112.0,
    anchor="nw",
    text=name,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 24 * -1)
)

canvas.create_text(
    346.0,
    175.0,
    anchor="nw",
    text="Acquisition Difficulty:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    411.0,
    anchor="nw",
    text=desc2,
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    204.0,
    391.0,
    anchor="nw",
    text=desc1+'-',
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    346.0,
    196.0,
    anchor="nw",
    text=f"{rank}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    355.0,
    196.0,
    anchor="nw",
    text="-rank",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    287.0,
    272.0,
    anchor="nw",
    text="-BUFF: ",
    fill="#4CFF73",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    347.0,
    272.0,
    anchor="nw",
    text=f"-{buff_1_name} {buff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    347.0,
    294.0,
    anchor="nw",
    text=f"-{buff_2_name} {buff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    287.0,
    333.0,
    anchor="nw",
    text="-DEBUFF: ",
    fill="#FF4C4C",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    367.0,
    333.0,
    anchor="nw",
    text=f"-{debuff_1_name} {debuff_1}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    367.0,
    353.0,
    anchor="nw",
    text=f"-{debuff_2_name} {debuff_2}",
    fill="#FFFFFF",
    font=("Montserrat Light", 15 * -1)
)

canvas.create_text(
    528.0,
    196.0,
    anchor="nw",
    text=n_cat,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    528.0,
    175.0,
    anchor="nw",
    text="Category:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    637.0,
    198.0,
    anchor="nw",
    text=f"{val:,}",
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    637.0,
    177.0,
    anchor="nw",
    text="Value:",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_text(
    740.0,
    198.0,
    anchor="nw",
    text=qty,
    fill="#FFFFFF",
    font=("Montserrat SemiBold", 15 * -1)
)

canvas.create_text(
    740.0,
    177.0,
    anchor="nw",
    text="Qty",
    fill="#FFFFFF",
    font=("Montserrat Light", 14 * -1)
)

canvas.create_rectangle(
    149.0,
    99.0,
    279.0,
    229.0,
    fill="#2E2E2E",
    outline="")

def get_button_image(name, max_width, max_height):
    try:
        # Construct the absolute path to the Images folder
        script_dir = os.path.dirname(os.path.abspath(__file__))
        # Navigate up to the project root directory
        project_root = os.path.abspath(os.path.join(script_dir, "..", "..", ".."))
        file_loc = os.path.join(project_root, "Images")
        files = os.path.join(file_loc, name + ' Big.png')
        if not os.path.exists(files):
            raise FileNotFoundError
    except:
        file_loc = os.path.join(project_root, "Images")
        files = os.path.join(file_loc, "Unknown.png")

    # Open the image
    image = Image.open(files)
    
    # Calculate the resize ratio
    width_ratio = max_width / image.width
    height_ratio = max_height / image.height
    resize_ratio = min(width_ratio, height_ratio)
    
    # Resize the image
    new_width = int(image.width * resize_ratio)
    new_height = int(image.height * resize_ratio)
    resized_image = image.resize((new_width, new_height))
    
    # Convert the image to PhotoImage
    photo_image = ImageTk.PhotoImage(resized_image)
    
    return photo_image

max_width, max_height = 164.615385, 126.153846

image_image_3 = get_button_image(name, max_width, max_height)
image_3 = canvas.create_image(
    214.0,
    164.0,
    image=image_image_3
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_3.place(
    x=819.0,
    y=64.0,
    width=40.0,
    height=40.0
)

canvas.create_rectangle(
    0.0,
    0.0,
    240.0,
    24.0,
    fill="#0c679b",
    outline="")

canvas.create_rectangle(
    0.0,
    525.0,
    925.0,
    555.0,
    fill="#0c679b",
    outline="")

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    35.0,
    270.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    925.0,
    294.0,
    image=image_image_5
)

canvas.create_rectangle(
    240.0,
    0.0,
    957.0,
    36.0,
    fill="#0c679b",
    outline="")

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    478.0,
    21.0,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_6, "<B1-Motion>", move_window)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    480.0,
    530.0,
    image=image_image_7
)
window.resizable(False, False)
window.mainloop()
