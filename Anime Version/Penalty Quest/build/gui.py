
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from datetime import datetime, timedelta, date
import time
import subprocess
import json
import csv
import os
import psutil
import threading

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

def center_window(window, width, height):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    x = (screen_width - width)-1400
    #y = ((screen_height - height) // 2)+350
    y = ((screen_height - height) // 2)-80

    window.geometry(f"{width}x{height}+{x}+{y}")

window_height = 289
window_width = 524

#window.geometry("524x289")
center_window(window, window_width, window_height)
window.configure(bg = "#FFFFFF")
window.wm_attributes("-topmost", True)
window.overrideredirect(True)
window.attributes('-alpha',0.7)

def start_countdown(duration_seconds):
    end_time = datetime.now() + timedelta(seconds=duration_seconds)
    update_countdown(end_time)

def update_countdown(end_time):
    remaining_time = end_time - datetime.now()

    if remaining_time.days < 0:
        countdown_completed()

    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    timer_text = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    canvas.itemconfig(countdown_label, text=timer_text)

    window.after(1000, update_countdown, end_time)

# Function to run when countdown reaches 00:00:00
def countdown_completed():
    window.quit()
    subprocess.Popen(['python', 'Anime Version/Penalty Quest Rewards/build/gui.py'])

subprocess.Popen(['python', 'sfx.py'])

with open("Files/Data/Penalty_Info.json", "r") as pen_info_file:
    pen_info_data=json.load(pen_info_file)
    info=pen_info_data["Penalty Info"]
    pr_name1=info[0]
    pr_name2=info[1]

def task_kill():
    if pr_name1 != "NONE":
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] == pr_name1:
                os.system(f"taskkill /F /PID {proc.info['pid']}")
    if pr_name2 != "NONE":
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] == pr_name2:
                os.system(f"taskkill /F /PID {proc.info['pid']}")
    
    # Schedule the function to be called again after 1000 milliseconds (1 second)
    window.after(1000, task_kill)

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 289,
    width = 524,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    277.0,
    351.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    270.0,
    150.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    267.0,
    61.0,
    image=image_image_3
)

countdown_label=canvas.create_text(
    120.0,
    163.0,
    anchor="nw",
    text="00:00:00",
    fill="#FFFFFF",
    font=("Montserrat Bold", 64 * -1)
)

canvas.create_text(
    60.0,
    129.0,
    anchor="nw",
    text="Cannot use the Inputted distraction programs",
    fill="#FFFFFF",
    font=("Montserrat Regular", 18 * -1)
)

canvas.create_text(
    116.0,
    99.0,
    anchor="nw",
    text="[PENALTY QUEST: BLOCKED]",
    fill="#FF0000",
    font=("Montserrat Bold", 20 * -1)
)

start_time = time.time()

end_time = datetime.now().replace(hour=4, minute=0, second=0, microsecond=0)
start_countdown(14400)

window.resizable(False, False)
window.mainloop()
