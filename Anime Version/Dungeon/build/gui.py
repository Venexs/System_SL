
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import json
import csv
import subprocess
import random
import cv2
from PIL import Image, ImageTk
from datetime import datetime, timedelta

subprocess.Popen(['python', 'sfx.py'])

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("804x283")
window.configure(bg = "#FFFFFF")
window.attributes('-alpha',0.8)
window.overrideredirect(True)
window.wm_attributes("-topmost", True)

e_rank=d_rank=c_rank=b_rank=a_rank=s_rank=red_gate=0

class VideoPlayer:
    def __init__(self, canvas, video_path, x, y, frame_skip=2, resize_factor=0.8):
        self.canvas = canvas
        self.video_path = video_path
        self.cap = cv2.VideoCapture(video_path)
        self.x = x
        self.y = y
        self.frame_skip = frame_skip  # Number of frames to skip
        self.resize_factor = resize_factor  # Factor to resize frames
        self.image_id = self.canvas.create_image(self.x, self.y)
        self.frame_count = 0
        self.update_frame()

    def update_frame(self):
        ret, frame = self.cap.read()
        
        if not ret:
            # If the video has ended, reset the capture object
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
            ret, frame = self.cap.read()

        if ret:
            self.frame_count += 1
            if self.frame_count % self.frame_skip == 0:  # Skip frames for performance
                frame = cv2.resize(frame, (0, 0), fx=self.resize_factor, fy=self.resize_factor)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame)
                imgtk = ImageTk.PhotoImage(image=img)
                self.canvas.itemconfig(self.image_id, image=imgtk)
                self.canvas.imgtk = imgtk

        self.canvas.after(10, self.update_frame)

    def __del__(self):
        self.cap.release()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def ex_close(win):
    win.quit()

def dun_check():
    global e_rank
    global d_rank
    global c_rank
    global b_rank
    global a_rank
    global s_rank
    global red_gate

    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_check:
        dun_check_data=json.load(dun_check)

    dun_date=list(dun_check_data.keys())[0]
    date_format = "%Y-%m-%d"

    date_object = datetime.strptime(dun_date, date_format)
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)

    if date_object!=current_date:
        # E Rank Distro
        e_rank_vals=0
        for k in range(5):
            if random.randint(1, 2) == 1:
                e_rank_vals+=1

        # D Rank Distro
        d_rank_vals=0
        for k in range(7):
            if random.randint(1, 3) == 1:
                d_rank_vals+=1

        # C Rank Distro
        c_rank_vals=0
        for k in range(10):
            if random.randint(1, 3) == 1:
                c_rank_vals+=1

        # B Rank Distro
        b_rank_vals=0
        for k in range(10):
            if random.randint(1, 5) == 1:
                b_rank_vals+=1

        # A Rank Distro
        a_rank_vals=0
        for k in range(10):
            if random.randint(1, 10) == 1:
                a_rank_vals+=1

        # S Rank Distro
        s_rank_vals=0
        for k in range(1):
            if random.randint(1, 10) == 1:
                s_rank_vals+=1
        
        # Red Gate Rank Distro
        red_rank_vals=0
        for k in range(10):
            if random.randint(1, 20) == 1:
                red_rank_vals+=1

        dun={current_date_string:{"E":e_rank_vals,"D":d_rank_vals,"C":c_rank_vals,"B":b_rank_vals,"A":a_rank_vals,"S":s_rank_vals, "Red Gate":red_rank_vals}}
        with open("Files\Data\Todays_Dungeon.json", 'w') as wrt_dun_check:
            json.dump(dun, wrt_dun_check, indent=6)
            
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

        e_rank=dun_full_data[current_date_string]["E"]
        d_rank=dun_full_data[current_date_string]["D"]
        c_rank=dun_full_data[current_date_string]["C"]
        b_rank=dun_full_data[current_date_string]["B"]
        a_rank=dun_full_data[current_date_string]["A"]
        s_rank=dun_full_data[current_date_string]["S"]

        red_gate=dun_full_data[current_date_string]["Red Gate"]

dun_check()

def open_e_dunfile(eve):
    rank='E'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

def open_d_dunfile(eve):
    rank='D'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

def open_c_dunfile(eve):
    rank='C'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

def open_b_dunfile(eve):
    rank='B'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

def open_a_dunfile(eve):
    rank='A'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

def open_s_dunfile(eve):
    rank='S'
    with open("Files\Data\Todays_Dungeon.json", 'r') as dun_full:
        dun_full_data=json.load(dun_full)

    date_format = "%Y-%m-%d"
    current_date = datetime.now().date()
    current_date_string = current_date.strftime(date_format)
    dun_full_data[current_date_string][rank]-=1

    if dun_full_data[current_date_string][rank]!=0:
        with open("Files\Data\Dungeon_Rank.csv", 'w', newline='') as rank_file:
            fw=csv.writer(rank_file)
            fw.writerow([rank])

        with open("Files\Data\Todays_Dungeon.json", 'w') as final_dun_full:
            json.dump(dun_full_data, final_dun_full, indent=6)

        subprocess.Popen(['python', 'Anime Version/Dungeon Runs/build/gui.py'])
        window.quit()

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 283,
    width = 804,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    552.0,
    326.0,
    image=image_image_1
)

video_path = "Files/0001-0200.mp4"
player = VideoPlayer(canvas, video_path, 478.0, 213.0)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    400.0,
    157.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    110.0,
    71.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    88.0,
    153.0,
    image=image_image_4
)

canvas.tag_bind(image_4, "<ButtonPress-1>", open_e_dunfile)

canvas.create_text(
    41.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {e_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    212.0,
    153.0,
    image=image_image_5
)

canvas.tag_bind(image_5, "<ButtonPress-1>", open_d_dunfile)

canvas.create_text(
    164.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {d_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    335.0,
    153.0,
    image=image_image_6
)

canvas.tag_bind(image_6, "<ButtonPress-1>", open_c_dunfile)

canvas.create_text(
    287.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {c_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)


image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    458.0,
    153.0,
    image=image_image_7
)

canvas.tag_bind(image_7, "<ButtonPress-1>", (open_b_dunfile))

canvas.create_text(
    410.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {b_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    581.0,
    153.0,
    image=image_image_8
)

canvas.tag_bind(image_8, "<ButtonPress-1>", ((open_a_dunfile)))

canvas.create_text(
    533.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {a_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    704.0,
    153.0,
    image=image_image_9
)

canvas.tag_bind(image_9, "<ButtonPress-1>", (open_s_dunfile))

canvas.create_text(
    656.0,
    212.0,
    anchor="nw",
    text=f"Available Today: {s_rank}",
    fill="#FFFFFF",
    font=("Montserrat Medium", 10 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print(),
    relief="flat"
)
button_1.place(
    x=602.0,
    y=251.0,
    width=166.0,
    height=22.0
)

imag0=canvas.create_rectangle(
    0.0,
    0.0,
    804.0,
    33.0,
    fill="#262626",
    outline="")

canvas.tag_bind(imag0, "<ButtonPress-1>", start_move)
canvas.tag_bind(imag0, "<B1-Motion>", move_window)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: ex_close(window),
    relief="flat"
)
button_2.place(
    x=768.0,
    y=2.0,
    width=28.0,
    height=28.0
)


window.resizable(False, False)
window.mainloop()
