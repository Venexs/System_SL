
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import threading
import json
import csv
import subprocess
import time
import sys
import system

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")

thing=txt='None'
fin_data={
    "Skills":"False",
    "Quests":"False",
    "Upgrade":"False",
    "Lines":"False"
}

stop_event0 = threading.Event()

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def make_window_transparent(window):
    # This function makes the window background transparent
    window.wm_attributes('-transparentcolor', window['bg'])

def unhide_line(s):
    if s=="Skills":
        canvas.itemconfig(thing_txt, text="New Skill Acquired")
    elif s=="Quests":
        canvas.itemconfig(thing_txt, text="New Quest Acquired")
    elif s=="Upgrade":
        canvas.itemconfig(thing_txt, text="Random skill upgraded")
    canvas.itemconfig("text0", state="normal")
    canvas.itemconfig("text", state="normal")
    pause_thread()

def unhide_lines():
    txt="LINE - 1\nLINE - 2\nLINE - 3"
    canvas.itemconfig(line_txt, text=txt)
    canvas.itemconfig("text0", state="normal")
    canvas.itemconfig("tex2", state="normal")
    pause_thread()

def check_for_updates(stop_event, pause_event):
    while not stop_event.is_set():
        if not pause_event.is_set():
            try:
                with open('Files/Data/New_Updates.json', 'r') as updatefile:
                    check_data = json.load(updatefile)
                    if check_data["Skills"] == "True":
                        hide_text_items0()
                        unhide_line("Skills")
                    elif check_data["Quests"] == "True":
                        hide_text_items0()
                        unhide_line("Quests")
                    elif check_data["Upgrade"] == "True":
                        hide_text_items0()
                        unhide_line("Upgrade")
                    elif check_data["Lines"] == "True":
                        hide_text_items0()
                        unhide_lines()
            except:
                print("Error")
        else:
            print("", end='')
        time.sleep(1)

def pause_thread():
    pause_event.set()
    print("Thread paused")

def resume_thread():
    pause_event.clear()
    print("Thread resumed")

def code_final(event):
    et1=entry_1.get()
    et2=entry_2.get()
    et3=entry_3.get()
    et4=entry_4.get()
    et5=entry_5.get()

    if et1=='A' and et2=='R' and et3=='1' and et4=='5' and et5=='E':
        with open("Files\Titles\Titles.json", 'r') as fson:
            data=json.load(fson)
            data["False Ranker"]={"Statbuff":10,"Rank":"?"}

        with open("Files/Titles/Titles.json", 'w') as final_title_import:
            json.dump(data, final_title_import, indent=4)

        subprocess.Popen(['python', (f'{theme} Version/Access Code Complete/build/gui.py')])

    elif et1=='I' and et2=='M' and et3=='G' and et4=='O' and et5=='D':
        with open("Files\Titles\Titles.json", 'r') as fson:
            data=json.load(fson)
            data["One Above All"]={"Statbuff":50,"Rank":"?"}

        with open("Files/Titles/Titles.json", 'w') as final_title_import:
            json.dump(data, final_title_import, indent=4)

        subprocess.Popen(['python', (f'{theme} Version/Access Code Complete/build/gui.py')])

    else:
        subprocess.Popen(['python', (f'{theme} Version/Access Code Incomplete/build/gui.py')])

    hide_0()

window = Tk()

window.geometry("435x423")
window.configure(bg = "#505050")
window.wm_attributes("-topmost", True)
window.overrideredirect(True)
#window.update()
make_window_transparent(window)

thread0=threading.Thread(target=system.check_midnight(window,stop_event0))
thread0.start()

def start_move(event):
    global lastx, lasty
    lastx = event.x_root
    lasty = event.y_root

def move_window(event):
    global lastx, lasty
    deltax = event.x_root - lastx
    deltay = event.y_root - lasty
    x = window.winfo_x() + deltax
    y = window.winfo_y() + deltay
    window.geometry("+%s+%s" % (x, y))
    lastx = event.x_root
    lasty = event.y_root

def update_file():
    with open('Files/Data/New_Updates.json', 'w') as updatefile:
        json.dump(fin_data, updatefile, indent=4)

def hide_text_items(event):
    canvas.itemconfig("text0", state="hidden")
    canvas.itemconfig("text", state="hidden")
    canvas.itemconfig("text1", state="hidden")
    update_file()
    resume_thread()

def hide_text_items0():
    canvas.itemconfig("text0", state="hidden")
    canvas.itemconfig("text", state="hidden")
    canvas.itemconfig("text1", state="hidden")
    update_file()
    resume_thread()

def show_bar(event):
    canvas.itemconfig("bar", state="normal")

def hide_bar(event):
    canvas.itemconfig("bar", state="hidden")

with open('Files/Data/Theme_Check.json', 'r') as themefile:
    theme_data=json.load(themefile)
    theme=theme_data["Theme"]

with open("Files/status.json", 'r') as fson:
    data=json.load(fson)
    name=data["status"][0]['name'].upper()
    # ? =================================================
    hp=data["status"][0]['hp']
    mp=data["status"][0]['mp']
    lvl=data["status"][0]['level']
    old_lvl=f"{lvl:02d}"
    # ? =================================================
    stre=data["status"][0]['str']
    intel=data["status"][0]['int']
    agi=data["status"][0]['agi']
    vit=data["status"][0]['vit']
    per=data["status"][0]['per']
    man=data["status"][0]['man']
    # ? =================================================
    tit=data["status"][1]['title'].upper()
    job=data["status"][1]['job'].upper()
    # ? =================================================
    xp_str=data["status"][0]['XP']
    coins=data["status"][0]['coins']
    # ? =================================================
    av_str_based=data["avail_eq"][0]['str_based']
    av_int_based=data["avail_eq"][0]['int_based']
    # ? =================================================

# ? =====================================================================
# ! The Every 5th Level Skil Checker
system.random_skill_check()
# ? =====================================================================
system.random_quest()
# ? =====================================================================

canvas = Canvas(
    window,
    bg = "#505050",
    height = 423,
    width = 435,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    359.0,
    74.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    358.5,
    73.0,
    image=image_image_2
)

canvas.tag_bind(image_2, "<ButtonPress-1>", show_bar)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    425.0,
    10.0,
    image=image_image_3
)

canvas.tag_bind(image_3, "<ButtonPress-1>", start_move)
canvas.tag_bind(image_3, "<B1-Motion>", move_window)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    151.0,
    73.0,
    image=image_image_4,
    tags="text0",
    state="hidden"
)

line_txt=canvas.create_text(
    11.0,
    55.0,
    anchor="nw",
    text="LINE - 1\nLINE - 2\nLINE - 3",
    fill="#000000",
    font=("MontserratItalic Medium", 10 * -1),
    tags="text1",
    state="hidden"
)

thing_txt=canvas.create_text(
    13.0,
    61.0,
    anchor="nw",
    text=f"NEW {thing} acquired!",
    fill="#000000",
    font=("MontserratItalic Medium", 20 * -1),
    tags="text",
    state="hidden"
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: hide_text_items0(),
    relief="flat"
)
button_1.place(
    x=283.0,
    y=32.0,
    width=12.0,
    height=12.0
)

canvas.create_rectangle(
    259.0,
    133.0,
    425.0,
    417.0,
    fill="#1A1A1A",
    outline="",
    tags="bar",
    state="hidden")

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    339.0,
    166.0,
    image=image_image_5,
    tags="bar",
    state="hidden"
)

def inv_open(event):
    inv_name=f"{theme} Version/Inventory/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_5, "<ButtonPress-1>", inv_open)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    334.0,
    197.5,
    image=image_image_6,
    tags="bar",
    state="hidden"
)

def daily_open(event):
    inv_name=f"{theme} Version/Daily Quest/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_6, "<ButtonPress-1>", daily_open)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    354.0,
    229.5,
    image=image_image_7,
    tags="bar",
    state="hidden"
)

def quest_open(event):
    inv_name=f"{theme} Version/Quests/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_7, "<ButtonPress-1>", quest_open)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    359.0,
    261.5,
    image=image_image_8,
    tags="bar",
    state="hidden"
)

def skill_open(event):
    inv_name=f"{theme} Version/Skills Tab/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_8, "<ButtonPress-1>", skill_open)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    357.0,
    293.5,
    image=image_image_9,
    tags="bar",
    state="hidden"
)

def status_open(event):
    inv_name=f"{theme} Version/Status Tab/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_9, "<ButtonPress-1>", status_open)

image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    337.0,
    325.5,
    image=image_image_10,
    tags="bar",
    state="hidden"
)

def equip_open(event):
    inv_name=f"{theme} Version/Equipment/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_10, "<ButtonPress-1>", equip_open)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    361.0,
    357.5,
    image=image_image_11,
    tags="bar",
    state="hidden"
)

def shop_open(event):
    inv_name=f"{theme} Version/Shop/build/gui.py"
    subprocess.Popen(['python', inv_name])

canvas.tag_bind(image_11, "<ButtonPress-1>", shop_open)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    364.0,
    390.0,
    image=image_image_12,
    tags="bar",
    state="hidden"
)

def close_full(event):
    stop_event.set()

    # Wait for the thread to finish
    thread.join()

    sys.exit()

canvas.tag_bind(image_12, "<ButtonPress-1>", close_full)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    415.0,
    143.0,
    image=image_image_13,
    tags="bar",
    state="hidden"
)

canvas.tag_bind(image_13, "<ButtonPress-1>", hide_bar)

image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    289.0,
    117.0,
    image=image_image_14
)

canvas.create_rectangle(
    11.0,
    122.0,
    254.0,
    189.0,
    fill="#0C0C0C",
    outline="",
    tags="acc",
    state="hidden")

canvas.create_rectangle(
    14.0,
    125.0,
    251.0,
    186.0,
    fill="#D9D9D9",
    outline="",
    tags="acc",
    state="hidden")

canvas.create_text(
    54.0,
    124.0,
    anchor="nw",
    text="ENTER ACCESS CODE",
    fill="#000000",
    font=("Montserrat Medium", 13 * -1),
    tags="acc",
    state="hidden"
)

fnt=18

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    245.0,
    131.0,
    image=image_image_15,
    tags="acc",
    state="hidden"
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    240.0,
    175.0,
    image=image_image_16,
    tags="acc",
    state="hidden"
)

def hide(event):
    entry_1.place_forget()
    entry_2.place_forget()
    entry_3.place_forget()
    entry_4.place_forget()
    entry_5.place_forget()

    canvas.itemconfig("acc", state="hidden")
    canvas.itemconfig("acc0", state="hidden")

def hide_0():
    entry_1.place_forget()
    entry_2.place_forget()
    entry_3.place_forget()
    entry_4.place_forget()
    entry_5.place_forget()

    canvas.itemconfig("acc", state="hidden")
    canvas.itemconfig("acc0", state="hidden")

def show(event):
    global entry_1
    global entry_2
    global entry_3
    global entry_4
    global entry_5

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        56.5,
        163.5,
        image=entry_image_1,
        tags="acc",
        state="hidden"
    )
    entry_1 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Montserrat', fnt),
        justify="center"
    )
    entry_1.place(
        x=41.0,
        y=144.0,
        width=31.0,
        height=37.0
    )

    entry_image_2 = PhotoImage(
        file=relative_to_assets("entry_2.png"))
    entry_bg_2 = canvas.create_image(
        94.5,
        163.5,
        image=entry_image_2,
        tags="acc",
        state="hidden"
    )
    entry_2 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Montserrat', fnt),
        justify="center"
    )
    entry_2.place(
        x=79.0,
        y=144.0,
        width=31.0,
        height=37.0
    )

    entry_image_3 = PhotoImage(
        file=relative_to_assets("entry_3.png"))
    entry_bg_3 = canvas.create_image(
        132.5,
        163.5,
        image=entry_image_3,
        tags="acc",
        state="hidden"
    )
    entry_3 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Montserrat', fnt),
        justify="center"
    )
    entry_3.place(
        x=117.0,
        y=144.0,
        width=31.0,
        height=37.0
    )

    entry_image_4 = PhotoImage(
        file=relative_to_assets("entry_4.png"))
    entry_bg_4 = canvas.create_image(
        170.5,
        163.5,
        image=entry_image_4,
        tags="acc",
        state="hidden"
    )
    entry_4 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Montserrat', fnt),
        justify="center"
    )
    entry_4.place(
        x=155.0,
        y=144.0,
        width=31.0,
        height=37.0
    )

    entry_image_5 = PhotoImage(
        file=relative_to_assets("entry_5.png"))
    entry_bg_5 = canvas.create_image(
        208.5,
        163.5,
        image=entry_image_5,
        tags="acc",
        state="hidden"
    )
    entry_5 = Entry(
        bd=0,
        bg="#FFFFFF",
        fg="#000716",
        highlightthickness=0,
        font=('Montserrat', fnt),
        justify="center"
    )
    entry_5.place(
        x=193.0,
        y=144.0,
        width=31.0,
        height=37.0
    )

    canvas.itemconfig("acc", state="normal")
    canvas.itemconfig("acc0", state="normal")

canvas.tag_bind(image_16, "<ButtonPress-1>", code_final)
canvas.tag_bind(image_15, "<ButtonPress-1>", hide)
canvas.tag_bind(image_14, "<ButtonPress-1>", show)

stop_event = threading.Event()
pause_event = threading.Event()
thread = threading.Thread(target=check_for_updates, args=(stop_event,pause_event))
thread.start()

system.run_once_prog(stop_event0, thread0)

window.resizable(False, False)
window.mainloop()
